name: Release

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew --no-daemon clean build -x test

      - name: Determine version and artifact
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(./gradlew -q properties | awk -F": " '/^version:/ {print $2; exit}')
          if [[ -z "$VERSION" ]]; then
            echo "Failed to determine version from Gradle properties" >&2
            exit 1
          fi
          PROJECT_NAME=$(./gradlew -q properties | awk -F": " '/^name:/ {print $2; exit}')
          if [[ -z "$PROJECT_NAME" ]]; then
            # Fallback to settings.gradle rootProject.name
            PROJECT_NAME=$(awk -F"'" '/^rootProject.name/ {print $2; exit}' settings.gradle || true)
          fi
          if [[ -z "$PROJECT_NAME" ]]; then
            echo "Failed to determine project name" >&2
            exit 1
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG="v${VERSION}"
          RELEASE_NAME="v${VERSION} - ${SHORT_SHA}"
          ARTIFACT=$(ls target/${PROJECT_NAME}-${VERSION}.jar | head -n 1 || true)
          if [[ -z "$ARTIFACT" ]]; then
            echo "Could not find built JAR for version ${VERSION}" >&2
            ls -la target/ || true
            exit 1
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "artifact=${ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        shell: bash
        run: |
          set -euo pipefail
          CURRENT_TAG="${{ steps.vars.outputs.tag }}"
          PREV_TAG=$(git tag --list 'v*' --sort=-v:refname | head -n 1 || true)
          if [[ "$PREV_TAG" == "$CURRENT_TAG" ]]; then
            PREV_TAG=$(git tag --list 'v*' --sort=-v:refname | sed -n '2p' || true)
          fi
          if [[ -n "$PREV_TAG" ]]; then
            echo "Changelog from $PREV_TAG to HEAD" > RELEASE_NOTES.md
            echo >> RELEASE_NOTES.md
            git log ${PREV_TAG}..HEAD --pretty=format:'- %s (%h)' >> RELEASE_NOTES.md || true
          else
            echo "Changelog" > RELEASE_NOTES.md
            echo >> RELEASE_NOTES.md
            git log --pretty=format:'- %s (%h)' -n 100 >> RELEASE_NOTES.md || true
          fi
          echo >> RELEASE_NOTES.md
          echo "[SWITCH TO BETTER-NIGHTCORE](https://github.com/ssquadteam/Better-NightCore/releases)" >> RELEASE_NOTES.md
          echo "notes_file=RELEASE_NOTES.md" >> $GITHUB_OUTPUT

      - name: Create or update GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ steps.vars.outputs.tag }}"
          NAME="${{ steps.vars.outputs.name }}"
          ARTIFACT="${{ steps.vars.outputs.artifact }}"
          NOTES_FILE="${{ steps.notes.outputs.notes_file }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists. Updating..."
            gh release upload "$TAG" "$ARTIFACT" --clobber
            gh release edit "$TAG" --title "$NAME" --notes-file "$NOTES_FILE"
          else
            echo "Creating release $TAG"
            gh release create "$TAG" "$ARTIFACT" --title "$NAME" --notes-file "$NOTES_FILE"
          fi
